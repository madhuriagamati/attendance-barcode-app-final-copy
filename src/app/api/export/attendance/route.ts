import { prisma } from '@/lib/db';
import { NextRequest } from 'next/server';
import * as XLSX from 'xlsx';
function toCsv(rows:any[]){if(!rows.length)return '';const header=Object.keys(rows[0]);const escape=(v:any)=>{const s=String(v??'');return s.includes(',')||s.includes('"')||s.includes('\n')?'"'+s.replace(/"/g,'""')+'"':s;};return[header.join(','),...rows.map(r=>header.map(h=>escape(r[h])).join(','))].join('\n');}
export async function GET(req:NextRequest){const{searchParams}=req.nextUrl;const fmt=searchParams.get('format')||'csv';const from=searchParams.get('from');const to=searchParams.get('to');const studentId=searchParams.get('studentId');const where:any={};if(from||to){where.timestamp={};if(from)where.timestamp.gte=new Date(from+'T00:00:00');if(to)where.timestamp.lte=new Date(to+'T23:59:59');}if(studentId)where.studentId=studentId;const items=await prisma.attendance.findMany({where,orderBy:{timestamp:'desc'},include:{student:true}});const rows=items.map(i=>({timestamp:i.timestamp.toISOString(),local_time:i.timestamp.toLocaleString('en-US'),student:i.student?.name,barcode:i.student?.barcode,type:i.type,note:i.notes||''}));if(fmt==='xlsx'){const wb=XLSX.utils.book_new();const ws=XLSX.utils.json_to_sheet(rows);XLSX.utils.book_append_sheet(wb,ws,'Attendance');const buf=XLSX.write(wb,{type:'buffer',bookType:'xlsx'});return new Response(buf,{headers:{'Content-Type':'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet','Content-Disposition':'attachment; filename="attendance.xlsx"'}});}else{const csv=toCsv(rows);return new Response(csv,{headers:{'Content-Type':'text/csv','Content-Disposition':'attachment; filename="attendance.csv"'}});} } 
